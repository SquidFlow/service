openapi: 3.0.0
info:
  title: H4 Platform API
  version: '1.0.0'
  description: API for managing applications, clusters, templates and secrets

tags:
  - name: ApplicationTemplate
    description: Application template management endpoints
  - name: ArgoApplication
    description: ArgoCD application deployment and validation
  - name: Tenants
    description: Tenant management operations
  - name: Security
    description: Security and secrets management
  - name: DestinationCluster
    description: Destination cluster management operations
  - name: AppCode
    description: Application code repository management
  - name: Healthz
    description: System health and information endpoints

servers:
  - url: http://localhost:38080/api/v1
    description: Local development server
  - url: http://alb-0y0w4z2gd7tcsjgg07.cn-hongkong.alb.aliyuncs.com/api/v1
    description: test env

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

    ApplicationTemplateCreate:
      type: object
      required:
        - name
        - path
        - owner
        - source
        - appType
      properties:
        name:
          type: string
          example: "test-app-test1"
        description:
          type: string
          example: "test-app-template-description"
        path:
          type: string
          example: "/apps/test-app"
        owner:
          type: string
          example: "team-a"
        source:
          type: object
          required:
            - type
            - url
            - targetRevision
          properties:
            type:
              type: string
              enum: [git]
            url:
              type: string
              example: "https://github.com/example/mytest-app.git"
            targetRevision:
              type: string
              example: "main"
        appType:
          type: string
          enum: [helm, kustomize, helm+kustomize]

    ApplicationTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        path:
          type: string
        owner:
          type: string
        source:
          $ref: '#/components/schemas/ApplicationSource'
        validated:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ApplicationSource:
      type: object
      required:
        - type
        - url
        - targetRevision
        - path
      properties:
        type:
          type: string
          enum: [git]
          example: "git"
        url:
          type: string
          example: "git@github.com:h4-poc/platform.git"
        targetRevision:
          type: string
          example: "main"
        path:
          type: string
          example: "manifest/fluent-operator"

    ClusterCreate:
      type: object
      required:
        - name
        - env
        - kubeconfig
      properties:
        name:
          type: string
          example: "sit"
        env:
          type: string
          enum: [SIT, UAT, PRD]
        kubeconfig:
          type: string
          description: Base64 encoded kubeconfig
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            owner: "wgh"
            usage: "xxx"

    ClusterUpdate:
      type: object
      required:
        - env
      properties:
        env:
          type: string
          enum: [SIT, UAT, PRD]
        kubeconfig:
          type: string
          description: Base64 encoded kubeconfig
        labels:
          type: object
          additionalProperties:
            type: string

    ComponentStatus:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        message:
          type: string
        error:
          type: string

    VersionInfo:
      type: object
      properties:
        kubernetes:
          type: string
        platform:
          type: string

    ResourceQuota:
      type: object
      properties:
        cpu:
          type: string
        memory:
          type: string
        storage:
          type: string
        pvcs:
          type: string
        nodeports:
          type: string

    HealthStatus:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    NodeStatus:
      type: object
      properties:
        ready:
          type: integer
        total:
          type: integer

    ClusterInfo:
      type: object
      properties:
        name:
          type: string
        environment:
          type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/ComponentStatus'
        provider:
          type: string
        version:
          $ref: '#/components/schemas/VersionInfo'
        nodeCount:
          type: integer
        region:
          type: string
        resourceQuota:
          $ref: '#/components/schemas/ResourceQuota'
        health:
          $ref: '#/components/schemas/HealthStatus'
        nodes:
          $ref: '#/components/schemas/NodeStatus'
        labels:
          type: object
          additionalProperties:
            type: string

    DestinationCluster:
      type: object
      required:
        - clusters
      properties:
        clusters:
          type: array
          items:
            type: string
          example: ["sit1", "sit2"]
        namespace:
          type: string
          default: "default"
          example: "default"

    TLS:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
        secretName:
          type: string
          example: "demo1-tls"

    IngressHost:
      type: object
      properties:
        host:
          type: string
          example: "demo1.h4.com"
        tls:
          $ref: '#/components/schemas/TLS'

    Ingress:
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/IngressHost'
          example:
            - host: "demo1.h4.com"
              tls:
                enabled: true
                secretName: "demo1-tls"
            - host: "demo2.h4.com"
              tls:
                enabled: true
                secretName: "demo2-tls"

    SecretStoreRef:
      type: object
      properties:
        id:
          type: string
          example: "secret-store"

    ExternalSecret:
      type: object
      properties:
        secret_store_ref:
          $ref: '#/components/schemas/SecretStoreRef'

    Security:
      type: object
      properties:
        external_secret:
          $ref: '#/components/schemas/ExternalSecret'

    ArgoApplicationCreate:
      type: object
      required:
        - application_source
        - application_name
        - tenant_name
        - destination_cluster
      properties:
        application_source:
          $ref: '#/components/schemas/ApplicationSource'
        application_name:
          type: string
          example: "demo1"
        tenant_name:
          type: string
          example: "testing"
        appcode:
          type: string
          example: "edsf"
        description:
          type: string
          example: "test description"
        destination_cluster:
          $ref: '#/components/schemas/DestinationCluster'
        ingress:
          $ref: '#/components/schemas/Ingress'
        security:
          $ref: '#/components/schemas/Security'
        is_dryrun:
          type: boolean
          default: false
          example: false

    ArgoApplication:
      type: object
      properties:
        name:
          type: string
        project:
          type: string
        status:
          type: string
        health:
          type: string
        syncStatus:
          type: string

    ValidateTemplateRequest:
      type: object
      required:
        - templateSource
        - targetRevision
        - path
      properties:
        templateSource:
          type: string
          example: "git@github.com:h4-poc/platform.git"
        targetRevision:
          type: string
          example: "main"
        path:
          type: string
          example: "manifest/fluent-operator"

    ValidateTemplateResponse:
      type: object
      properties:
        valid:
          type: boolean
        message:
          type: string
        details:
          type: object

    ProjectDest:
      type: object
      properties:
        server:
          type: string
          example: "https://kubernetes.default.svc"
        namespace:
          type: string
          example: "default"

    ProjectResource:
      type: object
      properties:
        group:
          type: string
          example: "apps"
        kind:
          type: string
          example: "Deployment"

    TenantDetailInfo:
      type: object
      properties:
        name:
          type: string
          example: "tenant1"
        namespace:
          type: string
          example: "tenant1"
        description:
          type: string
          example: "Tenant description"
        default_cluster:
          type: string
          example: "https://kubernetes.default.svc"
        source_repos:
          type: array
          items:
            type: string
          example: ["git@github.com:org/repo.git"]
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDest'
        cluster_resource_whitelist:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResource'
        namespace_resource_whitelist:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResource'
        created_by:
          type: string
          example: "admin"
        created_at:
          type: string
          format: date-time

    TenantCreate:
      type: object
      required:
        - project-name
      properties:
        project-name:
          type: string
          example: "tenant3"
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            label1: "value1"
        annotations:
          type: object
          additionalProperties:
            type: string
          example:
            annotation1: "value1"

    SecretStoreCreate:
      type: object
      required:
        - secret_store_yaml
      properties:
        secret_store_yaml:
          type: string
          description: YAML configuration for SecretStore

    SecretStoreInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time

    AppCode:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/ApplicationSource'
        status:
          type: string
          enum: [active, archived]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AppCodeResponse:
      type: object
      properties:
        appCodes:
          type: array
          items:
            type: string
          example: ["esfs", "esfs-dev", "esfs-test"]

    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        kubernetes:
          type: string
          example: "ok"
        argocd:
          type: string
          example: "ok"
        version:
          type: object
          properties:
            version:
              type: string
              example: "v1.0.0"
            buildDate:
              type: string
              example: "2024-03-15T12:00:00Z"
            gitCommit:
              type: string
              example: "abc123def"
            goVersion:
              type: string
              example: "go1.21.0"
            goCompiler:
              type: string
              example: "gc"
            platform:
              type: string
              example: "linux/amd64"

    TenantListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TenantInfo'
        success:
          type: boolean
          example: true
        total:
          type: integer
          example: 3

    TenantInfo:
      type: object
      properties:
        name:
          type: string
          example: "tenant1"
        namespace:
          type: string
          example: "argocd"
        default_cluster:
          type: string
          example: "https://kubernetes.default.svc"

    ArgoApplicationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Application created successfully"
        application:
          type: object
          properties:
            name:
              type: string
              example: "demo1"
            tenant_name:
              type: string
              example: "testing"
            appcode:
              type: string
              example: "edsf"
            description:
              type: string
              example: "test description"
            source:
              $ref: '#/components/schemas/ApplicationSource'
            destination_clusters:
              $ref: '#/components/schemas/DestinationCluster'
            ingress:
              $ref: '#/components/schemas/Ingress'
            security:
              $ref: '#/components/schemas/Security'
            created_by:
              type: string
              example: "username"
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            status:
              type: string
              example: "Pending"
            revision:
              type: string
              example: "main"

    ArgoApplicationListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        total:
          type: integer
          example: 2
        items:
          type: array
          items:
            $ref: '#/components/schemas/ArgoApplicationDetail'

    ArgoApplicationDetail:
      type: object
      properties:
        name:
          type: string
          example: "demo-app"
        tenant_name:
          type: string
          example: "tenant1"
        appcode:
          type: string
          example: "demo"
        description:
          type: string
          example: "Demo application"
        created_by:
          type: string
          example: "john.doe"
        template:
          type: object
          properties:
            source:
              $ref: '#/components/schemas/ApplicationSource'
            last_commit_info:
              type: object
              properties:
                commit_id:
                  type: string
                  example: "abc123"
                message:
                  type: string
                  example: "Update configuration"
                author:
                  type: string
                  example: "jane.doe"
                timestamp:
                  type: string
                  format: date-time
        h4_config:
          type: object
          properties:
            destination_clusters:
              $ref: '#/components/schemas/DestinationCluster'
            ingress:
              $ref: '#/components/schemas/Ingress'
            security:
              $ref: '#/components/schemas/Security'
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
        runtime_status:
          type: object
          properties:
            status:
              type: string
              example: "Healthy"
            health:
              type: string
              example: "Healthy"
            sync_status:
              type: string
              example: "Synced"
            deployed_clusters:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "cluster-1"
                  namespace:
                    type: string
                    example: "default"
                  pod_count:
                    type: integer
                    example: 3
                  secret_count:
                    type: integer
                    example: 2
                  status:
                    type: string
                    example: "Running"
                  last_sync_time:
                    type: string
                    format: date-time
            resource_metrics:
              $ref: '#/components/schemas/ResourceMetrics'

    ResourceMetrics:
      type: object
      properties:
        cpu_cores:
          type: string
          example: "200m"
        memory_usage:
          type: string
          example: "256Mi"


paths:
  /applications/templates:
    post:
      tags: [ApplicationTemplate]
      summary: Create application template
      operationId: createApplicationTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationTemplateCreate'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationTemplate'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [ApplicationTemplate]
      summary: List all application templates
      operationId: listApplicationTemplates
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationTemplate'

  /applications/templates/{template_id}:
    parameters:
      - name: template_id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [ApplicationTemplate]
      summary: Get application template by ID
      operationId: getApplicationTemplate
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationTemplate'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [ApplicationTemplate]
      summary: Update application template
      operationId: updateApplicationTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationTemplate'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [ApplicationTemplate]
      summary: Delete application template
      operationId: deleteApplicationTemplate
      responses:
        '204':
          description: Template deleted successfully
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deploy/argocdapplications:
    post:
      tags: [ArgoApplication]
      summary: Create ArgoCD application
      description: Create a new ArgoCD application with support for multi-cluster deployment
      operationId: createArgoApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArgoApplicationCreate'
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArgoApplicationResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - tenant mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deploy/argocdapplications/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: Application name

    get:
      tags: [ArgoApplication]
      summary: Get ArgoCD application details
      description: Get detailed information about an ArgoCD application including template source, H4 configuration and runtime status
      operationId: describeArgoApplication
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArgoApplicationDetail'
        '403':
          description: Forbidden - user does not have permission to view this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [ArgoApplication]
      summary: Delete ArgoCD application
      description: Delete an ArgoCD application. If this is the last project using the application, the entire application directory will be removed.
      operationId: deleteArgoApplication
      responses:
        '204':
          description: Application deleted successfully
        '403':
          description: Forbidden - user does not have permission to delete this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                gitError:
                  value:
                    error: "Failed to push changes to git repository"
                argocdError:
                  value:
                    error: "Failed to delete ArgoCD application"

  /deploy/argocdapplications/validate:
    post:
      tags: [ArgoApplication]
      summary: Validate ArgoCD application template
      operationId: validateArgoApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTemplateRequest'
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateTemplateResponse'

  /tenants:
    post:
      tags: [Tenants]
      summary: Create tenant
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreate'
      responses:
        '201':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tenant created successfully"
                  tenant:
                    $ref: '#/components/schemas/TenantDetailInfo'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Tenants]
      summary: List all tenants
      operationId: listTenants
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tenants/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: Tenant name

    get:
      tags: [Tenants]
      summary: Get tenant details
      operationId: describeTenant
      responses:
        '200':
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDetailInfo'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: deleteTenant
      responses:
        '204':
          description: Tenant deleted successfully
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /security/externalsecrets/secretstore:
    post:
      tags: [Security]
      summary: Create SecretStore
      operationId: createSecretStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretStoreCreate'
      responses:
        '201':
          description: SecretStore created successfully

    get:
      tags: [Security]
      summary: List SecretStores
      operationId: listSecretStores
      responses:
        '200':
          description: List of SecretStores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecretStoreInfo'

  /appcode:
    get:
      tags: [AppCode]
      summary: List all application code repositories
      operationId: listAppCodes
      responses:
        '200':
          description: List of application code names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCodeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /destinationCluster:
    get:
      tags: [DestinationCluster]
      summary: List all clusters
      operationId: listClusters
      responses:
        '200':
          description: List of clusters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClusterInfo'

    post:
      tags: [DestinationCluster]
      summary: Create cluster
      operationId: createCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
      responses:
        '201':
          description: Cluster created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterInfo'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /destinationCluster/{clusterName}:
    parameters:
      - name: clusterName
        in: path
        required: true
        schema:
          type: string

    get:
      tags: [DestinationCluster]
      summary: Get single cluster
      operationId: getCluster
      responses:
        '200':
          description: Cluster details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterInfo'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [DestinationCluster]
      summary: Deregister cluster
      operationId: deleteCluster
      responses:
        '204':
          description: Cluster deleted successfully
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [DestinationCluster]
      summary: Update cluster
      operationId: updateCluster
      description: Update cluster environment and labels
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterUpdate'
      responses:
        '200':
          description: Cluster updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterInfo'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /healthz:
    get:
      tags: [Healthz]
      summary: Get system health status
      operationId: getHealthStatus
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
