openapi: 3.0.0
info:
  title: SquidFlow Platform
  version: '1.0.0'
  description: API for managing applications, clusters, templates and secrets

tags:
  - name: Application
    description: Application deployment and validation
  - name: Tenants
    description: Tenant management operations
  - name: Security
    description: Security and secrets management
  - name: Cluster
    description: Cluster management operations
  - name: AppCode
    description: Application code repository management
  - name: Healthz
    description: System health and information endpoints

servers:
  - url: http://localhost:38080/api/v1
    description: Local development server

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

    ApplicationSource:
      type: object
      required:
        - type
        - url
        - targetRevision
        - path
      properties:
        type:
          type: string
          enum: [git]
          example: "git"
        url:
          type: string
          example: "git@github.com:squidflow/platform.git"
        targetRevision:
          type: string
          example: "main"
        path:
          type: string
          example: "manifest/fluent-operator"

    ClusterCreate:
      type: object
      required:
        - name
        - env
        - kubeconfig
      properties:
        name:
          type: string
          example: "sit"
        env:
          type: string
          enum: [SIT, UAT, PRD]
        kubeconfig:
          type: string
          description: Base64 encoded kubeconfig
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            owner: "wgh"
            usage: "xxx"

    ClusterUpdate:
      type: object
      required:
        - env
      properties:
        env:
          type: string
          enum: [SIT, UAT, PRD]
        kubeconfig:
          type: string
          description: Base64 encoded kubeconfig
        labels:
          type: object
          additionalProperties:
            type: string

    ComponentStatus:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        message:
          type: string
        error:
          type: string

    VersionInfo:
      type: object
      properties:
        kubernetes:
          type: string
        platform:
          type: string

    ResourceQuota:
      type: object
      properties:
        cpu:
          type: string
        memory:
          type: string
        storage:
          type: string
        pvcs:
          type: string
        nodeports:
          type: string

    HealthStatus:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    NodeStatus:
      type: object
      properties:
        ready:
          type: integer
        total:
          type: integer

    ClusterInfo:
      type: object
      properties:
        name:
          type: string
        environment:
          type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/ComponentStatus'
        provider:
          type: string
        version:
          $ref: '#/components/schemas/VersionInfo'
        nodeCount:
          type: integer
        region:
          type: string
        resourceQuota:
          $ref: '#/components/schemas/ResourceQuota'
        health:
          $ref: '#/components/schemas/HealthStatus'
        nodes:
          $ref: '#/components/schemas/NodeStatus'
        labels:
          type: object
          additionalProperties:
            type: string

    DestinationCluster:
      type: object
      required:
        - clusters
      properties:
        clusters:
          type: array
          items:
            type: string
          example: ["sit1", "sit2"]
        namespace:
          type: string
          default: "default"
          example: "default"

    TLS:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
        secretName:
          type: string
          example: "demo1-tls"

    Ingress:
      type: object
      properties:
        host:
          type: string
          example: "demo1.h4.com"
        tls:
          $ref: '#/components/schemas/TLS'

    SecretStoreRef:
      type: object
      properties:
        id:
          type: string
          example: "secret-store"

    ExternalSecret:
      type: object
      properties:
        secret_store_ref:
          $ref: '#/components/schemas/SecretStoreRef'

    Security:
      type: object
      properties:
        external_secret:
          $ref: '#/components/schemas/ExternalSecret'

    ArgoApplicationCreate:
      type: object
      required:
        - application_source
        - application_name
        - tenant_name
        - destination_cluster
      properties:
        application_source:
          $ref: '#/components/schemas/ApplicationSource'
        application_name:
          type: string
          example: "demo1"
        tenant_name:
          type: string
          example: "testing"
        appcode:
          type: string
          example: "edsf"
        description:
          type: string
          example: "test description"
        destination_cluster:
          $ref: '#/components/schemas/DestinationCluster'
        ingress:
          $ref: '#/components/schemas/Ingress'
        security:
          $ref: '#/components/schemas/Security'
        is_dryrun:
          type: boolean
          default: false
          example: false

    ProjectDest:
      type: object
      properties:
        server:
          type: string
          example: "https://kubernetes.default.svc"
        namespace:
          type: string
          example: "default"

    ProjectResource:
      type: object
      properties:
        group:
          type: string
          example: "apps"
        kind:
          type: string
          example: "Deployment"

    TenantDetailInfo:
      type: object
      properties:
        name:
          type: string
          example: "tenant1"
        namespace:
          type: string
          example: "tenant1"
        description:
          type: string
          example: "Tenant description"
        default_cluster:
          type: string
          example: "https://kubernetes.default.svc"
        source_repos:
          type: array
          items:
            type: string
          example: ["git@github.com:org/repo.git"]
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDest'
        cluster_resource_whitelist:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResource'
        namespace_resource_whitelist:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResource'
        created_by:
          type: string
          example: "admin"
        created_at:
          type: string
          format: date-time

    TenantCreate:
      type: object
      required:
        - project-name
      properties:
        project-name:
          type: string
          example: "tenant3"
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            label1: "value1"
        annotations:
          type: object
          additionalProperties:
            type: string
          example:
            annotation1: "value1"

    SecretStoreCreate:
      type: object
      required:
        - secret_store_yaml
      properties:
        secret_store_yaml:
          type: string
          description: YAML representation of the SecretStore configuration

    SecretStoreCreateResponse:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        success:
          type: boolean
        message:
          type: string

    SecretStoreInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        provider:
          type: string
        type:
          type: string
        status:
          type: string
        path:
          type: string
        lastSynced:
          type: string
        createdAt:
          type: string
        lastUpdated:
          type: string
        health:
          type: object
          properties:
            status:
              type: string
            message:
              type: string

    SecretStoreUpdate:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        server:
          type: string
        auth:
          type: object
          additionalProperties: true

    ProjectCreateRequest:
      type: object
      required:
        - project-name
      properties:
        project-name:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    TenantResponse:
      type: object
      properties:
        success:
          type: boolean
        total:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/TenantDetailInfo'

    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
        version:
          type: object
          properties:
            version:
              type: string
            buildDate:
              type: string
            gitCommit:
              type: string
            goVersion:
              type: string
            goCompiler:
              type: string
            platform:
              type: string
        kubernetes:
          type: string
        argocd:
          type: string
        error:
          type: string

    AppCode:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/ApplicationSource'
        status:
          type: string
          enum: [active, archived]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AppCodeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "App codes listed successfully"
        appCodes:
          type: array
          items:
            type: string
          example: ["esfs", "esfs-dev", "esfs-test"]

    ApplicationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Applications created successfully"
        application:
          $ref: '#/components/schemas/ApplicationDetail'

    ApplicationDetail:
      type: object
      properties:
        name:
          type: string
        tenant_name:
          type: string
        appcode:
          type: string
        description:
          type: string
        created_by:
          type: string
        template:
          type: object
          properties:
            source:
              $ref: '#/components/schemas/ApplicationSource'
            last_commit_info:
              type: object
              properties:
                commit_id:
                  type: string
                message:
                  type: string
                author:
                  type: string
                timestamp:
                  type: string
                  format: date-time
        runtime_status:
          type: object
          properties:
            status:
              type: string
            health:
              type: string
            sync_status:
              type: string
            deployed_clusters:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "cluster-1"
                  namespace:
                    type: string
                    example: "default"
                  pod_count:
                    type: integer
                    example: 3
                  secret_count:
                    type: integer
                    example: 2
                  status:
                    type: string
                    example: "Running"
                  last_sync_time:
                    type: string
                    format: date-time
            resource_metrics:
              $ref: '#/components/schemas/ResourceMetrics'

    ResourceMetrics:
      type: object
      properties:
        cpu_cores:
          type: string
          example: "200m"
        memory_usage:
          type: string
          example: "256Mi"

    ClusterResponse:
      type: object
      properties:
        name:
          type: string
        environment:
          type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/ComponentStatus'
        provider:
          type: string
        version:
          $ref: '#/components/schemas/VersionInfo'
        nodeCount:
          type: integer
        region:
          type: string
        resourceQuota:
          $ref: '#/components/schemas/ResourceQuota'
        health:
          $ref: '#/components/schemas/HealthStatus'
        nodes:
          $ref: '#/components/schemas/NodeStatus'
        networkPolicy:
          type: boolean
        ingressController:
          type: string
        lastUpdated:
          type: string
        consoleUrl:
          type: string
        monitoring:
          $ref: '#/components/schemas/MonitoringInfo'
        builtin:
          type: boolean
        labels:
          type: object
          additionalProperties:
            type: string

    MonitoringInfo:
      type: object
      properties:
        prometheus:
          type: boolean
        grafana:
          type: boolean
        alertManager:
          type: boolean
        urls:
          type: object
          properties:
            prometheus:
              type: string
            grafana:
              type: string
            alertManager:
              type: string


paths:
  /deploy/applications:
    post:
      tags: [Application]
      summary: Create application
      operationId: ApplicationCreate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - application_source
                - application_instantiation
              properties:
                application_source:
                  type: object
                  required:
                    - repo
                    - target_revision
                    - path
                  properties:
                    repo:
                      type: string
                    target_revision:
                      type: string
                    path:
                      type: string
                    submodules:
                      type: boolean
                application_instantiation:
                  type: object
                  required:
                    - application_name
                    - tenant_name
                  properties:
                    application_name:
                      type: string
                    tenant_name:
                      type: string
                    appcode:
                      type: string
                    description:
                      type: string
                application_target:
                  type: array
                  items:
                    type: object
                    required:
                      - cluster
                      - namespace
                    properties:
                      cluster:
                        type: string
                      namespace:
                        type: string
                is_dryrun:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'

    get:
      tags: [Application]
      summary: List applications
      operationId: ApplicationsList
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationDetail'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deploy/applications/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: Application name

    get:
      tags: [Application]
      summary: Get application details
      description: Get detailed information about an application including template source, H4 configuration and runtime status
      operationId: ApplicationGet
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
        '403':
          description: Forbidden - user does not have permission to view this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Application]
      summary: Delete application
      description: Delete an application. If this is the last project using the application, the entire application directory will be removed.
      operationId: ApplicationDelete
      responses:
        '204':
          description: Application deleted successfully
        '403':
          description: Forbidden - user does not have permission to delete this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                gitError:
                  value:
                    error: "Failed to push changes to git repository"
                argocdError:
                  value:
                    error: "Failed to delete ArgoCD application"

    patch:
      tags: [Application]
      summary: Update application
      operationId: ApplicationUpdate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Application name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                application_source:
                  type: object
                  properties:
                    repo:
                      type: string
                    target_revision:
                      type: string
                    path:
                      type: string
                    submodules:
                      type: boolean
                application_instantiation:
                  type: object
                  properties:
                    description:
                      type: string
                    security:
                      $ref: '#/components/schemas/Security'
                    ingress:
                      $ref: '#/components/schemas/Ingress'
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application updated successfully"
                  application:
                    $ref: '#/components/schemas/ApplicationDetail'
        '403':
          description: Forbidden - user does not have permission to update this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deploy/applications/validate:
    post:
      tags: [Application]
      summary: Validate application source
      operationId: ApplicationSourceValidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repo:
                  type: string
                  example: "git@github.com:SquidFlow/platform.git"
                target_revision:
                  type: string
                  example: "main"
                path:
                  type: string
                  example: "overlays/app/fluent-operator"
                submodules:
                  type: boolean
                  example: true
                application_specifier:
                  type: object
                  properties:
                    helm_manifest_path:
                      type: string
                      example: "manifests/4.0.0"
      responses:
        '200':
          description: Application source validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Valid kustomize application source"
                  type:
                    type: string
                    example: "kustomize"
                  suiteableEnv:
                    type: array
                    items:
                      type: object
                      properties:
                        environments:
                          type: string
                          example: "sit"
                        valid:
                          type: boolean
                          example: true
                        error:
                          type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tenants:
    post:
      tags: [Tenants]
      summary: Create a new tenant
      operationId: TenantCreate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: Tenant created successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Tenants]
      summary: List all tenants
      operationId: TenantsList
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tenants/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string

    get:
      tags: [Tenants]
      summary: Get tenant details
      operationId: TenantGet
      responses:
        '200':
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: TenantDelete
      responses:
        '200':
          description: Tenant deleted successfully
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /security/externalsecrets/secretstore:
    post:
      tags: [Security]
      summary: Create SecretStore
      operationId: SecretStoreCreate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretStoreCreate'
      responses:
        '201':
          description: SecretStore created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretStoreCreateResponse'

    get:
      tags: [Security]
      summary: List SecretStores
      operationId: SecretStoreList
      responses:
        '200':
          description: List of SecretStores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecretStoreInfo'

  /security/externalsecrets/secretstore/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string

    get:
      tags: [Security]
      summary: Get SecretStore details
      operationId: SecretStoreDescribe
      responses:
        '200':
          description: SecretStore details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretStoreInfo'
        '404':
          description: SecretStore not found

    delete:
      tags: [Security]
      summary: Delete SecretStore
      operationId: SecretStoreDelete
      responses:
        '200':
          description: SecretStore deleted successfully
        '404':
          description: SecretStore not found

    patch:
      tags: [Security]
      summary: Update SecretStore
      operationId: SecretStoreUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretStoreUpdate'
      responses:
        '200':
          description: SecretStore updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretStoreInfo'
        '404':
          description: SecretStore not found

  /healthz:
    get:
      tags: [Healthz]
      summary: Get system health status
      operationId: Healthz
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  /clusters:
    get:
      tags: [Cluster]
      summary: List all clusters
      operationId: ClusterList
      responses:
        '200':
          description: List of clusters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClusterResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Cluster]
      summary: Create cluster
      operationId: ClusterRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
      responses:
        '201':
          description: Cluster created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cluster:
                    $ref: '#/components/schemas/ClusterInfo'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clusters/{clusterName}:
    parameters:
      - name: clusterName
        in: path
        required: true
        schema:
          type: string
        description: Cluster name

    get:
      tags: [Cluster]
      summary: Get cluster details
      operationId: ClusterGet
      responses:
        '200':
          description: Cluster details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Cluster]
      summary: Delete cluster
      operationId: ClusterDeregister
      responses:
        '200':
          description: Cluster deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [Cluster]
      summary: Update cluster
      operationId: ClusterUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterUpdate'
      responses:
        '200':
          description: Cluster updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appcode:
    get:
      tags: [AppCode]
      summary: List application codes
      operationId: AppCodeList
      responses:
        '200':
          description: List of application codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCodeResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
