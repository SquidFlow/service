// Code generated by MockGen. DO NOT EDIT.
// Source: ./github/pull_requests.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v43/github"
)

// MockPullRequests is a mock of PullRequests interface.
type MockPullRequests struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestsMockRecorder
}

// MockPullRequestsMockRecorder is the mock recorder for MockPullRequests.
type MockPullRequestsMockRecorder struct {
	mock *MockPullRequests
}

// NewMockPullRequests creates a new mock instance.
func NewMockPullRequests(ctrl *gomock.Controller) *MockPullRequests {
	mock := &MockPullRequests{ctrl: ctrl}
	mock.recorder = &MockPullRequestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequests) EXPECT() *MockPullRequestsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPullRequests) Create(arg0 context.Context, arg1, arg2 string, arg3 *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPullRequestsMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequests)(nil).Create), arg0, arg1, arg2, arg3)
}

// CreateComment mocks base method.
func (m *MockPullRequests) CreateComment(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPullRequestsMockRecorder) CreateComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPullRequests)(nil).CreateComment), arg0, arg1, arg2, arg3, arg4)
}

// CreateCommentInReplyTo mocks base method.
func (m *MockPullRequests) CreateCommentInReplyTo(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string, arg5 int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentInReplyTo", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentInReplyTo indicates an expected call of CreateCommentInReplyTo.
func (mr *MockPullRequestsMockRecorder) CreateCommentInReplyTo(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentInReplyTo", reflect.TypeOf((*MockPullRequests)(nil).CreateCommentInReplyTo), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateReview mocks base method.
func (m *MockPullRequests) CreateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockPullRequestsMockRecorder) CreateReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockPullRequests)(nil).CreateReview), arg0, arg1, arg2, arg3, arg4)
}

// DeleteComment mocks base method.
func (m *MockPullRequests) DeleteComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPullRequestsMockRecorder) DeleteComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPullRequests)(nil).DeleteComment), arg0, arg1, arg2, arg3)
}

// DeletePendingReview mocks base method.
func (m *MockPullRequests) DeletePendingReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePendingReview indicates an expected call of DeletePendingReview.
func (mr *MockPullRequestsMockRecorder) DeletePendingReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingReview", reflect.TypeOf((*MockPullRequests)(nil).DeletePendingReview), arg0, arg1, arg2, arg3, arg4)
}

// DismissReview mocks base method.
func (m *MockPullRequests) DismissReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DismissReview indicates an expected call of DismissReview.
func (mr *MockPullRequestsMockRecorder) DismissReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissReview", reflect.TypeOf((*MockPullRequests)(nil).DismissReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Edit mocks base method.
func (m *MockPullRequests) Edit(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockPullRequestsMockRecorder) Edit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPullRequests)(nil).Edit), arg0, arg1, arg2, arg3, arg4)
}

// EditComment mocks base method.
func (m *MockPullRequests) EditComment(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockPullRequestsMockRecorder) EditComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockPullRequests)(nil).EditComment), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method.
func (m *MockPullRequests) Get(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestsMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequests)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetComment mocks base method.
func (m *MockPullRequests) GetComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockPullRequestsMockRecorder) GetComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockPullRequests)(nil).GetComment), arg0, arg1, arg2, arg3)
}

// GetRaw mocks base method.
func (m *MockPullRequests) GetRaw(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockPullRequestsMockRecorder) GetRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockPullRequests)(nil).GetRaw), arg0, arg1, arg2, arg3, arg4)
}

// GetReview mocks base method.
func (m *MockPullRequests) GetReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReview indicates an expected call of GetReview.
func (mr *MockPullRequestsMockRecorder) GetReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockPullRequests)(nil).GetReview), arg0, arg1, arg2, arg3, arg4)
}

// IsMerged mocks base method.
func (m *MockPullRequests) IsMerged(arg0 context.Context, arg1, arg2 string, arg3 int) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMerged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsMerged indicates an expected call of IsMerged.
func (mr *MockPullRequestsMockRecorder) IsMerged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMerged", reflect.TypeOf((*MockPullRequests)(nil).IsMerged), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockPullRequests) List(arg0 context.Context, arg1, arg2 string, arg3 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPullRequestsMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPullRequests)(nil).List), arg0, arg1, arg2, arg3)
}

// ListComments mocks base method.
func (m *MockPullRequests) ListComments(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestListCommentsOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockPullRequestsMockRecorder) ListComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockPullRequests)(nil).ListComments), arg0, arg1, arg2, arg3, arg4)
}

// ListCommits mocks base method.
func (m *MockPullRequests) ListCommits(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockPullRequestsMockRecorder) ListCommits(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockPullRequests)(nil).ListCommits), arg0, arg1, arg2, arg3, arg4)
}

// ListFiles mocks base method.
func (m *MockPullRequests) ListFiles(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockPullRequestsMockRecorder) ListFiles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockPullRequests)(nil).ListFiles), arg0, arg1, arg2, arg3, arg4)
}

// ListPullRequestsWithCommit mocks base method.
func (m *MockPullRequests) ListPullRequestsWithCommit(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsWithCommit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestsWithCommit indicates an expected call of ListPullRequestsWithCommit.
func (mr *MockPullRequestsMockRecorder) ListPullRequestsWithCommit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsWithCommit", reflect.TypeOf((*MockPullRequests)(nil).ListPullRequestsWithCommit), arg0, arg1, arg2, arg3, arg4)
}

// ListReviewComments mocks base method.
func (m *MockPullRequests) ListReviewComments(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.ListOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewComments", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewComments indicates an expected call of ListReviewComments.
func (mr *MockPullRequestsMockRecorder) ListReviewComments(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewComments", reflect.TypeOf((*MockPullRequests)(nil).ListReviewComments), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListReviewers mocks base method.
func (m *MockPullRequests) ListReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) (*github.Reviewers, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reviewers)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewers indicates an expected call of ListReviewers.
func (mr *MockPullRequestsMockRecorder) ListReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewers", reflect.TypeOf((*MockPullRequests)(nil).ListReviewers), arg0, arg1, arg2, arg3, arg4)
}

// ListReviews mocks base method.
func (m *MockPullRequests) ListReviews(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockPullRequestsMockRecorder) ListReviews(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockPullRequests)(nil).ListReviews), arg0, arg1, arg2, arg3, arg4)
}

// Merge mocks base method.
func (m *MockPullRequests) Merge(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string, arg5 *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestMergeResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockPullRequestsMockRecorder) Merge(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPullRequests)(nil).Merge), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RemoveReviewers mocks base method.
func (m *MockPullRequests) RemoveReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.ReviewersRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReviewers indicates an expected call of RemoveReviewers.
func (mr *MockPullRequestsMockRecorder) RemoveReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReviewers", reflect.TypeOf((*MockPullRequests)(nil).RemoveReviewers), arg0, arg1, arg2, arg3, arg4)
}

// RequestReviewers mocks base method.
func (m *MockPullRequests) RequestReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.ReviewersRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestReviewers indicates an expected call of RequestReviewers.
func (mr *MockPullRequestsMockRecorder) RequestReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReviewers", reflect.TypeOf((*MockPullRequests)(nil).RequestReviewers), arg0, arg1, arg2, arg3, arg4)
}

// SubmitReview mocks base method.
func (m *MockPullRequests) SubmitReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitReview indicates an expected call of SubmitReview.
func (mr *MockPullRequestsMockRecorder) SubmitReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReview", reflect.TypeOf((*MockPullRequests)(nil).SubmitReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateBranch mocks base method.
func (m *MockPullRequests) UpdateBranch(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestBranchUpdateOptions) (*github.PullRequestBranchUpdateResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestBranchUpdateResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockPullRequestsMockRecorder) UpdateBranch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockPullRequests)(nil).UpdateBranch), arg0, arg1, arg2, arg3, arg4)
}

// UpdateReview mocks base method.
func (m *MockPullRequests) UpdateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 string) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockPullRequestsMockRecorder) UpdateReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockPullRequests)(nil).UpdateReview), arg0, arg1, arg2, arg3, arg4, arg5)
}
